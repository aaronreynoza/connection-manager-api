#############################################################################
# Copyright 2019 ModusBox, Inc.                                             #
#                                                                           #
# info@modusbox.com                                                         #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
# http://www.apache.org/licenses/LICENSE-2.0                                #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################
---
swagger: "2.0"
info:
  description: "Connection Manager API"
  version: "1.6.0"
  title: "Connection Manager API"
  contact:
    email: "ramiro@modusbox.com"
host: "localhost:3001"
basePath: "/api"
tags:
- name: "env-dfsp-config"
  description: "Environments and DFSPs setup"
- name: "DFSP-client-certificate"
  description: "DFSP - Client Certificates PKI"
- name: "Hub-client-certificate"
  description: "Hub - Client Certificates PKI"
- name: "DFSP-Endpoint-configuration"
  description: "DFSP - Ingress and Egress endpoint configuration"
- name: "DFSP-Certificate-Authority"
  description: "DFSP Certificate Authority"
- name: "Hub-Certificate-Authority"
  description: "Hub Certificate Authority"
- name: "Hub-Endpoint-configuration"
  description: "Hub - Ingress and Egress endpoint configuration"
- name: "Hub-server-certificates-configuration"
  description: "Hub - Server Certificates config"
- name: "DFSP-server-certificates-configuration"
  description: "DFSP - Server Certificates config"
- name: "JWS-certificates-configuration"
  description: "JWS Certificates"
schemes:
- "http"
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: "password"
     # The flow used by the OAuth2 security scheme. Valid values are "implicit", "password", "application" or "accessCode".
    tokenUrl: https://WSO2_IM_SERVERl:9443/oauth2/token
    scopes:
      pta: Portal Technical Administrator
      mta: Mojabox Technical Administrator
      everyone: All logged in users
security:
  - OAuth2: [ pta ] # most restrictive role
paths:
  /login:
    post:
      tags:
      - "login"
      summary: "Logs the user, returns a JWT payload as JSON"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: username
          type: string
          description: username.
        - in: formData
          name: password
          type: string
          format: password
          description: password.
      operationId: "loginUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful login"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "invalid login"
          schema:
            $ref: "#/definitions/LoginResponse"
      x-swagger-router-controller: "Login"
  /logout:
    post:
      tags:
      - "login"
      summary: "Logs the user out, clears the JWT cookie"
      operationId: "logoutUser"
      responses:
        204:
          description: "successful logout"
      x-swagger-router-controller: "Login"
  /login2step:
    post:
      tags:
      - "login"
      summary: "Logs the user after the 2 factor authentication initial process of enrollment"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: username
          type: string
          required: true
          description: username
        - in: formData
          name: password
          type: string
          format: password
          required: true
          description: password.
        - in: formData
          name: generatedToken
          type: string
          pattern: ^[0-9]{6}$
          required: true
          description: six digit number generated by auth app for two factor authentication
      operationId: "login2step"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful login"
          schema:
            $ref: "#/definitions/LoginResponse2Step"
        400:
          description: "2fa not enabled"
        401:
          description: "invalid login"
        422:
          description: "external process error"
      x-swagger-router-controller: "Login"
  /resetPassword:
    post:
      tags:
      - "login"
      summary: "Reset password"
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: username
          type: string
          required: true
          description: username
        - in: formData
          name: newPassword
          type: string
          format: password
          required: true
          description: new password.
        - in: formData
          name: userguid
          type: string
          required: true
          description: userguid needed for password change
      operationId: "resetPassword"
      produces:
      - "application/json"
      responses:
        204:
          description: "successful password reset and login"
        401:
          description: "invalid userguid or username"
        422:
          description: "external process error"
      x-swagger-router-controller: "Login"
  /environments:
    get:
      tags:
      - "env-dfsp-config"
      summary: "Returns all the environments"
      security:
        - OAuth2: [ everyone ]
      operationId: "getEnvironments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Environment"
      x-swagger-router-controller: "Pki"
    post:
      tags:
      - "env-dfsp-config"
      summary: "Creates an environment on the Connection Manager"
      operationId: "createEnvironment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Environment initial info"
        required: true
        schema:
          $ref: "#/definitions/InboundEnvironment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Environment"
      x-swagger-router-controller: "Pki"
  /environments/{envId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    get:
      tags:
      - "env-dfsp-config"
      summary: "Find an environment by its id"
      security:
        - OAuth2: [ everyone ]
      description: "Returns an environment"
      operationId: "getEnvironmentById"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Environment"
        404:
          description: "Environment not found"
      x-swagger-router-controller: "Pki"
    delete:
      tags:
      - "env-dfsp-config"
      summary: "Deletes an environment and its data"
      description: "Removes the environment and all its configuration ( DFSPs, enrollments, keys, etc)."
      operationId: "deleteEnvironment"
      responses:
        204:
          description: "successful operation"
        404:
          description: "Environment not found"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/cas:
    post:
      tags:
      - "env-dfsp-config"
      summary: "Creates a CA for the environment"
      description: "Each environment needs a CA to sign the CSRs it receives\
        \ from the DFSPs on the Inbound flow. This operation creates a CA for\
        \ the environment, using the received CSR and signing it with a new\
        \ private key.\
        \ \n\
        \ Since there will usually be just once CA per environment,\
        \ this operation establish the newly created CA as the current CA,\
        \ replacing previously created ones.\
        \ \n\n\
        \ Key generation parameters\
        \ \n\n\
        \ Key Size should be at least 4096, and the signature algorithm\
        \ must be sha256WithRSAEncryption."
      operationId: "createCA"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "CA initial info"
        required: true
        schema:
          $ref: "#/definitions/CAInitialInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/ca/rootCert:
    get:
      tags:
      - "env-dfsp-config"
      summary: "Returns the CA root certificate"
      security:
        - OAuth2: [ everyone ]
      description: "Returns the certificate that was created with the createCA operation"
      operationId: "getCurrentCARootCert"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RootCACert"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/hub/endpoints:
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Returns all Hub endpoints"
      security:
        - OAuth2: [ everyone ]
      operationId: "getHubEndpoints"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "Environment id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/ingress/ips:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Adds a new IP entry to the Hub Ingress endpoint"
      description: "Adds the entry with state NEW"
      operationId: "createHubIngressIp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Hub ingress IP entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "HubNetworkConfig"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get the Hub Ingress IPs"
      security:
        - OAuth2: [ everyone ]
      description: ""
      operationId: "getHubIngressIps"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/ingress/ips/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ everyone ]
      operationId: "getHubIngressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    put:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Update an endpoint entry"
      operationId: "updateHubIngressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    delete:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      operationId: "deleteHubIngressIpEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/ingress/urls:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Adds a Hub Ingress URL"
      description: "Adds a Hub ingress URL with state NEW"
      operationId: "createHubIngressUrl"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Hub ingress URL"
        required: true
        schema:
          $ref: "#/definitions/InputURLValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointURL"
      x-swagger-router-controller: "HubNetworkConfig"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get the Hub Ingress URLs"
      security:
        - OAuth2: [ everyone ]
      description: ""
      operationId: "getHubIngressUrls"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointURL"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/ingress/urls/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ everyone ]
      operationId: "getHubIngressUrlEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    put:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Update an endpoint entry"
      operationId: "updateHubIngressUrlEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputURLValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    delete:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      operationId: "deleteHubIngressUrlEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/egress/ips:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Adds a new IP entry to the Hub Egress endpoint"
      description: "Adds the entry with state NEW"
      operationId: "createHubEgressIp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Hub egress IP entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "HubNetworkConfig"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get the Hub Egress IPs"
      security:
        - OAuth2: [ everyone ]
      description: ""
      operationId: "getHubEgressIps"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/egress/ips/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ everyone ]
      operationId: "getHubEgressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    put:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Update an endpoint entry"
      operationId: "updateHubEgressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    delete:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      operationId: "deleteHubEgressIpEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/endpoints/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ everyone ]
      operationId: "getHubEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    put:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Update an endpoint entry"
      operationId: "updateHubEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/EndPointAny"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "HubNetworkConfig"
    delete:
      tags:
      - "Hub-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      operationId: "deleteHubEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "HubNetworkConfig"
  /environments/{envId}/hub/servercerts:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-server-certificates-configuration"
      summary: "post server certificate"
      description: "TBD"
      operationId: "createHubServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TBD"
        required: true
        schema:
          $ref: "#/definitions/CSRParameters"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerCert"
      x-swagger-router-controller: "HubServerCerts"
    get:
      tags:
      - "Hub-server-certificates-configuration"
      summary: "get server certificate"
      security:
        - OAuth2: [ everyone ]
      description: "TBD"
      operationId: "getHubServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerCert"
        404:
          description: "server certs not set"
      x-swagger-router-controller: "HubServerCerts"
    delete:
      tags:
      - "Hub-server-certificates-configuration"
      summary: "delete server certificate"
      description: "TBD"
      operationId: "deleteHubServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        204:
          description: "no content"
      x-swagger-router-controller: "HubServerCerts"
  /environments/{envId}/hub/cas:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-Certificate-Authority"
      summary: "Creates a new Hub CA"
      security:
        - OAuth2: [ pta ]
      description: |
        Creates a new Hub CA.

        * rootCertificate: a root certificate used by the Hub. Can be a self-signed certificate, or a globally trusted CA like Digicert.
        * intermediateChain: list of intermediate certificates.

        The following combinations are possible

        * no rootCertificate and no intermediateChain: The Hub uses a trusted CA to sign its certificates.
        * rootCertificate and no intermediateChain: The Hub uses a self-signed CA to sign its certificates.
        * no rootCertificate and intermediateChain: The Hub uses a chain of intermediate certificates ultimately signed by a trusted CA to sign its certificates.
        * rootCertificate and intermediateChain: The Hub uses a chain of intermediate certificates ultimately signed by a self-signed CA to sign its certificates.
      operationId: "createHubCA"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "CA info"
        required: true
        schema:
          $ref: "#/definitions/HubCAInfoInput"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HubCAInfo"
        400:
          description: "validation error"
      x-swagger-router-controller: "HubCAController"
    get:
      tags:
      - "Hub-Certificate-Authority"
      summary: "Returns the Hub CAs"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getHubCAs"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HubCAInfo"
        400:
          description: "validation error"
      x-swagger-router-controller: "HubCAController"
  /environments/{envId}/hub/cas/{hubCAId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "hubCAId"
      in: "path"
      description: "Hub CA Id"
      required: true
      type: "string"
    get:
      tags:
      - "Hub-Certificate-Authority"
      summary: "Returns the Hub CA with id = hubCAId"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getHubCA"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HubCAInfo"
        400:
          description: "validation error"
      x-swagger-router-controller: "HubCAController"
    delete:
      tags:
      - "Hub-Certificate-Authority"
      summary: "Deletes the Hub CA with id = hubCAId"
      security:
        - OAuth2: [ pta ]
      operationId: "deleteHubCA"
      produces:
      - "application/json"
      responses:
        204:
          description: "successful operation"
        400:
          description: "validation error"
      x-swagger-router-controller: "HubCAController"
  /environments/{envId}/dfsps/jwscerts:
    get:
      tags:
      - "JWS-certificates-configuration"
      summary: "get JWS certificates for all DFSPs in the environment"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "getAllDfspJWSCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
                $ref: "#/definitions/DFSPJWSCert"
        404:
          description: "JWS certs not set"
      x-swagger-router-controller: "JWSCerts"
  /environments/{envId}/dfsps:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    post:
      tags:
      - "env-dfsp-config"
      summary: "Creates an entry to store DFSP related info"
      description: "Creates an entry to store DFSP related info\n\nReturns the newly\
        \ created object's id\n"
      operationId: "createDFSP"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP initial info"
        required: true
        schema:
          $ref: "#/definitions/DFSPCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectCreatedResponse"
      x-swagger-router-controller: "Pki"
    get:
      tags:
      - "env-dfsp-config"
      summary: "Returns a list with all the DFSPs in the environment"
      security:
        - OAuth2: [ everyone ]
      operationId: "getEnvironmentDFSPs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "List of DFSPs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DFSP"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/dfsps/endpoints/unprocessed:
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Returns the unprocessed endpoint items"
      operationId: "getUnprocessedEndpointItems"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/servercerts:
    get:
      tags:
      - "DFSP-server-certificates-configuration"
      summary: "get server certificates for all DFSPs in the environment"
      security:
        - OAuth2: [ pta ]
      description: "TBD"
      operationId: "getAllDfspServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
                $ref: "#/definitions/DFSPServerCert"
        404:
          description: "server certs not set"
      x-swagger-router-controller: "DfspServerCerts"
  /environments/{envId}/dfsps/{dfspId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "ID of dfsp"
      required: true
      type: "string"
    put:
      tags:
      - "env-dfsp-config"
      summary: "Updates DFSP related info"
      description: "Updates DFSP related info"
      operationId: "updateDFSP"
      security:
        - OAuth2: [ pta ]
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP updated info"
        required: true
        schema:
          $ref: "#/definitions/DFSPUpdate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DFSPUpdate"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/dfsps/{dfspId}/ca:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-Certificate-Authority"
      summary: "Sets DFSP CA certificates"
      security:
        - OAuth2: [ mta, pta ]
      description: |
        Saves the DFSP certificates. Both parameters are optional. It replaces the previous CA if there was one.

        * rootCertificate: a root certificate used by the DFSP. Can be a self-signed certificate, or a globally trusted CA like Digicert.
        * intermediateChain: list of intermediate certificates.

        The following combinations are possible

        * no rootCertificate and no intermediateChain: The DFSP uses a trusted CA to sign its certificates.
        * rootCertificate and no intermediateChain: The DFSP uses a self-signed CA to sign its certificates.
        * no rootCertificate and intermediateChain: The DFSP uses a chain of intermediate certificates ultimately signed by a trusted CA to sign its certificates.
        * rootCertificate and intermediateChain: The DFSP uses a chain of intermediate certificates ultimately signed by a self-signed CA to sign its certificates.
      operationId: "setDFSPca"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "CA info"
        required: true
        schema:
          $ref: "#/definitions/CAInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CAInfo"
        400:
          description: "validation error"
      x-swagger-router-controller: "Pki"
    get:
      tags:
      - "DFSP-Certificate-Authority"
      summary: "Returns the DFSP CA certificates"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPca"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CAInfo"
        400:
          description: "validation error"
      x-swagger-router-controller: "Pki"
  /environments/{envId}/dfsps/{dfspId}/enrollments/inbound:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-client-certificate"
      summary: "Create DFSP Inbound enrollment"
      security:
        - OAuth2: [ mta, pta ]
      description: "Create an InboundEnrollment, associate the CSR to it, and set its state to CSR_LOADED. It validates that the CSR Public Key length is at least 4096 bits and that the CSR signature algorithm is 'sha256WithRSAEncryption'"
      operationId: "createDFSPInboundEnrollment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP inbound initial info"
        required: true
        schema:
          $ref: "#/definitions/DFSPInboundCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectCreatedResponse"
        400:
          description: "validation error"
      x-swagger-router-controller: "DfspInbound"
    get:
      tags:
      - "DFSP-client-certificate"
      summary: "Get a list of DFSP Inbound enrollments"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPInboundEnrollments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/InboundEnrollment"
      x-swagger-router-controller: "DfspInbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/inbound/{enId}:
    get:
      tags:
      - "DFSP-client-certificate"
      summary: "Get a DFSP Inbound enrollment"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPInboundEnrollment"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "enId"
        in: "path"
        description: "Enrollment id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/InboundEnrollment"
      x-swagger-router-controller: "DfspInbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/inbound/{enId}/sign:
    post:
      tags:
      - "DFSP-client-certificate"
      summary: "Creates a new certificate using the info in the CSR and adds it to the enrollment"
      security:
        - OAuth2: [ pta ]
      description: "The Connection Manager creates a Certificate based on the CSR, using the internal environment CA.\
        \ It adds this certificate to the enrollment and updates its state to CERT_SIGNED\n"
      operationId: "signDFSPInboundEnrollment"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "enId"
        in: "path"
        description: "Enrollment id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/InboundEnrollment"
        400:
          description: "validation error"
        422:
          description: "don't have internal CA"
      x-swagger-router-controller: "DfspInbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/outbound:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "Hub-client-certificate"
      summary: "Create DFSP Outbound enrollment"
      security:
        - OAuth2: [ pta ]
      description: "Create an OutboundEnrollment, associate the CSR to it, and set its state to CSR_LOADED. It validates that the CSR Public Key length is at least 4096 bits and that the CSR signature algorithm is 'sha256WithRSAEncryption'"
      operationId: "createDFSPOutboundEnrollment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP outbound initial info"
        required: true
        schema:
          $ref: "#/definitions/DFSPOutboundCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectCreatedResponse"
        400:
          description: "validation error"
      x-swagger-router-controller: "DfspOutbound"
    get:
      tags:
      - "Hub-client-certificate"
      summary: "Get a list of DFSP Outbound enrollments"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPOutboundEnrollments"
      produces:
      - "application/json"
      parameters:
      - name: "state"
        in: "query"
        description: "state to filter enrollments by"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OutboundEnrollment"
        400:
          description: "validation error"
      x-swagger-router-controller: "DfspOutbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/outbound/csr:
    post:
      tags:
      - "Hub-client-certificate"
      summary: "Creates a CSR and a DFSP Outbound enrollment with it"
      security:
        - OAuth2: [ pta ]
      description: "Creates a CSR, signed by the environment CA. Creates an OutboundEnrollment, associate the CSR to it, and set its state to CSR_LOADED."
      operationId: "createCSRAndDFSPOutboundEnrollment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "CSR parameters"
        required: true
        schema:
          $ref: "#/definitions/CSRParameters"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectCreatedResponse"
        400:
          description: "validation error"
      x-swagger-router-controller: "DfspOutbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/outbound/{enId}:
    get:
      tags:
      - "Hub-client-certificate"
      summary: "Get a DFSP Outbound enrollment"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPOutboundEnrollment"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "enId"
        in: "path"
        description: "Enrollment id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OutboundEnrollment"
      x-swagger-router-controller: "DfspOutbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/outbound/{enId}/certificate:
    post:
      tags:
      - "Hub-client-certificate"
      summary: "Sets the enrollment certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "Sets the certificate, and change the enrollment state to CERT_SIGNED. Returns the enrollment. This operation doesn't validate the certificate, see POST ./validate"
      operationId: "addDFSPOutboundEnrollmentCertificate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "enId"
        in: "path"
        description: "Enrollment id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "DFSP outbound certificate"
        required: true
        schema:
          $ref: "#/definitions/Certificate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OutboundEnrollment"
        400:
          description: "validation error"
      x-swagger-router-controller: "DfspOutbound"
  /environments/{envId}/dfsps/{dfspId}/enrollments/outbound/{enId}/validate:
    post:
      tags:
      - "Hub-client-certificate"
      summary: "Validate a DFSP Outbound enrollment"
      security:
        - OAuth2: [ pta ]
      description: "Validate a DFSP Outbound enrollment"
      operationId: "validateDFSPOutboundEnrollmentCertificate"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "enId"
        in: "path"
        description: "Enrollment id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OutboundEnrollment"
      x-swagger-router-controller: "DfspOutbound"
  /environments/{envId}/dfsps/{dfspId}/endpoints:
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Returns all DFSP endpoints"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPEndpoints"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "Environment id"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/unprocessed:
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Returns the unprocessed dfsp items"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getUnprocessedDfspItems"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/ingress/ips:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Adds a new IP entry to the DFSP Ingress endpoint"
      security:
        - OAuth2: [ mta, pta ]
      description: "Adds the entry with state NEW"
      operationId: "createDFSPIngressIp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP ingress IP entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "DfspNetworkConfig"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get the DFSP Ingress IPs"
      security:
        - OAuth2: [ mta, pta ]
      description: ""
      operationId: "getDFSPIngressIps"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/ingress/ips/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPIngressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    put:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Update an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "updateDFSPIngressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    delete:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "deleteDFSPIngressIpEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/ingress/urls:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Adds a DFSP Ingress URL"
      security:
        - OAuth2: [ mta, pta ]
      description: "Adds a DFSP ingress URL with state NEW"
      operationId: "createDFSPIngressUrl"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP ingress URL"
        required: true
        schema:
          $ref: "#/definitions/InputURLValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointURL"
      x-swagger-router-controller: "DfspNetworkConfig"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get the DFSP Ingress URLs"
      security:
        - OAuth2: [ mta, pta ]
      description: ""
      operationId: "getDFSPIngressUrls"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointURL"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/ingress/urls/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPIngressUrlEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    put:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Update an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "updateDFSPIngressUrlEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputURLValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    delete:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "deleteDFSPIngressUrlEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/egress/ips:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Adds a new IP entry to the DFSP Egress endpoint"
      security:
        - OAuth2: [ mta, pta ]
      description: "Adds the entry with state NEW"
      operationId: "createDFSPEgressIp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DFSP egress IP entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "DfspNetworkConfig"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get the DFSP Egress IPs"
      security:
        - OAuth2: [ mta, pta ]
      description: ""
      operationId: "getDFSPEgressIps"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EndPointIp"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/egress/ips/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPEgressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    put:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Update an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "updateDFSPEgressIpEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/InputIPValue"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    delete:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "deleteDFSPEgressIpEndpoint"
      consumes:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "Environment id"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "epId"
        in: "path"
        description: "Endpoint entry id"
        required: true
        type: "string"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/{epId}:
    parameters:
    - name: "envId"
      in: "path"
      description: "Environment id"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    - name: "epId"
      in: "path"
      description: "Endpoint entry id"
      required: true
      type: "string"
    get:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Get an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "getDFSPEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    put:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Update an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "updateDFSPEndpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "endpoint entry"
        required: true
        schema:
          $ref: "#/definitions/EndPointAny"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
    delete:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Delete an endpoint entry"
      security:
        - OAuth2: [ mta, pta ]
      operationId: "deleteDFSPEndpoint"
      consumes:
      - "application/json"
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/endpoints/{epId}/confirmation:
    post:
      tags:
      - "DFSP-Endpoint-configuration"
      summary: "Updates the endpoint as confirmed"
      security:
        - OAuth2: [ pta ]
      operationId: "confirmEndpointItem"
      produces:
      - "application/json"
      parameters:
      - name: "envId"
        in: "path"
        description: "ID of environment"
        required: true
        type: "string"
      - name: "dfspId"
        in: "path"
        description: "DFSP id"
        required: true
        type: "string"
      - name: "epId"
        in: "path"
        description: "ID of the endpoint item"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EndPointAny"
      x-swagger-router-controller: "DfspNetworkConfig"
  /environments/{envId}/dfsps/{dfspId}/servercerts:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "DFSP-server-certificates-configuration"
      summary: "post server certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "createDfspServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TBD"
        required: true
        schema:
          $ref: "#/definitions/BaseServerCert"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerCert"
      x-swagger-router-controller: "DfspServerCerts"
    get:
      tags:
      - "DFSP-server-certificates-configuration"
      summary: "get server certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "getDfspServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerCert"
        404:
          description: "server certs not set"
      x-swagger-router-controller: "DfspServerCerts"
    delete:
      tags:
      - "DFSP-server-certificates-configuration"
      summary: "delete server certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "deleteDfspServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        204:
          description: "no content"
      x-swagger-router-controller: "DfspServerCerts"
    put:
      tags:
      - "DFSP-server-certificates-configuration"
      summary: "put server certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "updateDfspServerCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TBD"
        required: true
        schema:
          $ref: "#/definitions/BaseServerCert"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerCert"
      x-swagger-router-controller: "DfspServerCerts"
  /environments/{envId}/dfsps/{dfspId}/jwscerts:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "dfspId"
      in: "path"
      description: "DFSP id"
      required: true
      type: "string"
    post:
      tags:
      - "JWS-certificates-configuration"
      summary: "post JWS certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "createDfspJWSCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "TBD"
        required: true
        schema:
          $ref: "#/definitions/BaseJWSCert"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JWSCert"
      x-swagger-router-controller: "JWSCerts"
    get:
      tags:
      - "JWS-certificates-configuration"
      summary: "get JWS certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "getDfspJWSCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JWSCert"
        404:
          description: "JWS certs not set"
      x-swagger-router-controller: "JWSCerts"
    delete:
      tags:
      - "JWS-certificates-configuration"
      summary: "delete JWS certificate"
      security:
        - OAuth2: [ mta, pta ]
      description: "TBD"
      operationId: "deleteDfspJWSCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        204:
          description: "no content"
      x-swagger-router-controller: "JWSCerts"
  /environments/{envId}/dfsps/{dfspId}/status:
    get:
      summary: Retrieves Environment dfsp status
      security:
        - OAuth2: [ everyone ]
      description: Retrieves Environment dfsp status by phase and step completion
      operationId: getEnvironmentDfspStatus
      produces:
      - "application/json"
      parameters:
        - name: envId
          in: path
          description: ID of the environment to get satus
          required: true
          type: string
        - name: dfspId
          in: path
          description: ID of the dfsp to get satus
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
                $ref: '#/definitions/EnvironmentDfspStatus'
      x-swagger-router-controller: "DfspNetworkConfig"
  /monetaryzones:
    get:
      tags:
      - "monetaryzones"
      summary: "Returns the monetary zones supported"
      operationId: "getMonetaryZones"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MonetaryZone"
      x-swagger-router-controller: "MonetaryZonesController"
  /environments/{envId}/monetaryzones/{monetaryZoneId}/dfsps:
    parameters:
    - name: "envId"
      in: "path"
      description: "ID of environment"
      required: true
      type: "string"
    - name: "monetaryZoneId"
      in: "path"
      description: "ID of monetaryZone"
      required: true
      type: "string"
    get:
      tags:
      - "monetaryzones"
      summary: "Returns all the dfsps for that monetary zone"
      operationId: "getDfspsByMonetaryZones"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DFSPCreate"
      x-swagger-router-controller: "Pki"
definitions:
  LoginResponse:
    type: "object"
    description: "login response"
    properties:
      ok:
        type: boolean
      token:
        type: object
        properties:
          payload:
            type: object
            properties:
              at_hash:
                description: ""
                type: string
              aud:
                description: ""
                type: string
              sub:
                description: "Subject"
                type: string
              nbf:
                description: ""
                type: integer
              azp:
                description: ""
                type: string
              amr:
                type: array
                description: "User groups"
                items:
                  type: string
              iss:
                description: "Issuer"
                type: string
              groups:
                type: array
                description: "User groups"
                items:
                  type: string
              exp:
                description: ""
                type: integer
              iat:
                description: ""
                type: integer
              dfspId:
                description: "DFSP id. To be used when calling the API"
                type: string
              userguid:
                description: "GUID to be used for reset password"
                type: string

      userguid:
        type: string
      askPassword:
        type: boolean
      sharedSecret:
        type: string
      issuer:
        type: string
      label:
        type: string
      enrolled:
        type: boolean
      2faEnabled:
        type: boolean
    example:
      ok: true,
      token:
        payload:
          at_hash: "bJi28CeD9HLPf1ouOVkQTA"
          aud: "CLIENT_KEY"
          sub: "dfsp1"
          nbf: 1558709500
          azp: "CLIENT_KEY"
          amr:
            - password
          iss: "https://WSO2_IM_SERVER:9443/oauth2/token"
          groups:
            - "Application/MTA"
            - "Application/DFSP:DFSP1"
            - "Internal/everyone"
          exp: 1558713100
          iat: 1558709500
          dfspId: 'DFSP1'
          userguid: "userguid"
      userguid: "userguid"
      askPassword: true
      sharedSecret: "xxxx"
      issuer: "MCM"
      label: "devMCM"
      enrolled: true
      2faEnabled: false
  LoginResponse2Step:
    type: "object"
    description: "login2step response"
    properties:
      ok:
        type: boolean
      token:
        type: object
        properties:
          payload:
            type: object
            properties:
              at_hash:
                description: ""
                type: string
              aud:
                description: ""
                type: string
              sub:
                description: "Subject"
                type: string
              nbf:
                description: ""
                type: integer
              azp:
                description: ""
                type: string
              amr:
                type: array
                description: "User groups"
                items:
                  type: string
              iss:
                description: "Issuer"
                type: string
              groups:
                type: array
                description: "User groups"
                items:
                  type: string
              exp:
                description: ""
                type: integer
              iat:
                description: ""
                type: integer
              dfspId:
                description: "DFSP id. To be used when calling the API"
                type: string
    example:
      ok: true,
      token:
        payload:
          at_hash: "bJi28CeD9HLPf1ouOVkQTA"
          aud: "CLIENT_KEY"
          sub: "dfsp1"
          nbf: 1558709500
          azp: "CLIENT_KEY"
          amr:
            - password
          iss: "https://WSO2_IM_SERVER:9443/oauth2/token"
          groups:
            - "Application/MTA"
            - "Application/DFSP:DFSP1"
            - "Internal/everyone"
          exp: 1558713100
          iat: 1558709500
          dfspId: 'DFSP1'
  ValidInvalidState:
    type: boolean
  ValidationState:
    type: "string"
    enum:
      - "VALID"
      - "INVALID"
      - "NOT_AVAILABLE"
  HubCAInfoInput:
    type: "object"
    description: "Hub CA Input Body"
    required:
      - name
      - type
    properties:
      rootCertificate:
        type: "string"
        description: "PEM-encoded certificate"
      intermediateChain:
        type: "string"
        description: "PEM-encoded certificate"
      name:
        type: "string"
        description: "Descriptive name. Must be unique in the environment"
      type:
        type: "string"
        enum:
        - "EXTERNAL"
  HubCAInfo:
    type: "object"
    description: "Hub CA Input"
    allOf:
      - $ref: "#/definitions/HubCAInfoInput"
      - type: object
        properties:
          id:
            type: "integer"
            format: "int32"
          rootCertificateInfo:
            $ref: "#/definitions/CertInfo"
          intermediateChainInfo:
            type: "array"
            description: "List of CertInfo."
            items:
              $ref: "#/definitions/CertInfo"
          validations:
            $ref: "#/definitions/ValidationList"
          validationState:
            $ref: "#/definitions/ValidationState"
  BaseServerCert:
    type: "object"
    description: "The server certificate."
    properties:
      rootCertificate:
        type: "string"
        description: "PEM-encoded root CA certificate"
      intermediateChain:
        type: "string"
        description: "PEM-encoded intermediate chain certificats"
      serverCertificate:
        type: "string"
        description: "PEM-encoded server certificate"
  ServerCert:
    description: "The server certificate, with info and id."
    allOf:
      - $ref: "#/definitions/BaseServerCert"
      - type: object
        properties:
          id:
            type: "integer"
            format: "int32"
          rootCertificateInfo:
            $ref: "#/definitions/CertInfo"
          intermediateChainInfo:
            type: "array"
            description: "List of CertInfo."
            items:
              $ref: "#/definitions/CertInfo"
          serverCertificateInfo:
            $ref: "#/definitions/CertInfo"
          validations:
            $ref: "#/definitions/ValidationList"
          validationState:
            $ref: "#/definitions/ValidationState"
          state:
            $ref: "#/definitions/ValidInvalidState"
  DFSPServerCert:
    description: "The server certificate with the dfpsId."
    allOf:
      - $ref: "#/definitions/ServerCert"
      - type: object
        properties:
          dfspId:
            type: "string"
  BaseJWSCert:
    type: "object"
    description: "JWS Certificate."
    required:
      - publicKey
    properties:
      publicKey:
        type: "string"
        description: "PEM-encoded JWS public key"
  JWSCert:
    description: "The JWS public key, with info and id."
    allOf:
      - $ref: "#/definitions/BaseJWSCert"
      - type: object
        properties:
          validations:
            $ref: "#/definitions/ValidationList"
          validationState:
            $ref: "#/definitions/ValidationState"
  DFSPJWSCert:
    description: "The JWS certificate with the dfpsId."
    allOf:
      - $ref: "#/definitions/JWSCert"
      - type: object
        properties:
          dfspId:
            type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      type:
        type: "string"
    example:
      code: 0
      message: "message"
      type: "type"
  DFSPCreate:
    type: "object"
    properties:
      dfspId:
        type: "string"
        description: "DFSP identifier on Hub"
      name:
        type: "string"
        description: "Informal name"
      monetaryZoneId:
        type: "string"
        description: 'The monetary Zone'
      securityGroup:
        type: "string"
        description: "OAuth role/group owner"
    example:
      dfspId: "DFSP1"
      name: "DFSP 1"
      monetaryZoneId: "EUR"
  DFSPUpdate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Informal name"
      monetaryZoneId:
        type: "string"
        description: 'The monetary Zone'
    example:
      name: "DFSP 1"
      monetaryZoneId: "EUR"
  DFSP:
    type: "object"
    properties:
      id:
        type: "string"
        description: "DFSP identifier on Hub"
      envId:
        type: "integer"
        description: "Environment id"
      name:
        type: "string"
        description: "Informal name"
      monetaryZoneId:
        type: "string"
        description: 'The monetary Zone'
      securityGroup:
        type: "string"
        description: "DFSP Security group"
    example:
      envId: 24,
      id: "DFSP2"
      name: "DFSP2"
      monetaryZoneId: "EUR"
      securityGroup: "Application/DFSP:DFSP2"
  DFSPInboundCreate:
    type: "object"
    properties:
      clientCSR:
        type: "string"
        description: "PEM encoded CSR"
  Certificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        description: "PEM encoded"
  InboundCertificate:
    type: "object"
    allOf:
      - $ref: "#/definitions/Certificate"
      - type: object
        properties:
          hubCAId:
            type: integer
            description: "Hub CA Id which created the Certificate"
  DFSPOutboundCreate:
    type: "object"
    required:
    - "hubCSR"
    properties:
      hubCSR:
        type: "string"
        description: "PEM encoded CSR"
  InboundEnvironment:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Dev, test, pre-prod, etc"
      defaultDN:
        type: "object"
        properties:
          CN:
            type: "string"
            description: Common Name
          O:
            type: "string"
            description: Organization
          OU:
            type: "string"
            description: Organizational Unit
          C:
            type: "string"
            description: Country
          ST:
            type: "string"
            description: State
          L:
            type: "string"
            description: Location
    example:
      name: "DEV"
      defaultDN:
        CN: "tes1.centralhub.modusbox.live"
        O: "Modusbox"
        OU: "MCM"
  Environment:
    type: "object"
    required:
      - "name"
      - "id"
    properties:
      id:
        type: integer
        description: "Object ID"
      name:
        type: "string"
        description: "Dev, test, pre-prod, etc"
    example:
      id: 42
      name: "DEV"
  InboundEnrollment:
    type: "object"
    properties:
      certificate:
        type: "string"
        description: "PEM encoded"
      csr:
        type: "string"
        description: "PEM encoded"
      state:
        type: "string"
        enum:
        - "NEW"
        - "CSR_LOADED"
        - "CERT_SIGNED"
        - "INVALID"
      certInfo:
        $ref: "#/definitions/CertInfo"
      csrInfo:
        $ref: "#/definitions/CSRInfo"
      hubCAId:
        type: integer
        description: "Hub CA Id"
  ObjectCreatedResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Object ID"
    example:
      id: 42
  OutboundEnrollment:
    type: "object"
    properties:
      id:
        type: "integer"
      certificate:
        type: "string"
        description: "PEM encoded"
      csr:
        type: "string"
        description: "PEM encoded"
      certInfo:
        $ref: "#/definitions/CertInfo"
      csrInfo:
        $ref: "#/definitions/CSRInfo"
      state:
        $ref: "#/definitions/ValidInvalidState"
      validations:
        $ref: "#/definitions/ValidationList"
      validationState:
        $ref: "#/definitions/ValidationState"
  CAInfo:
    properties:
      rootCertificate:
        type: "string"
        description: "PEM-encoded certificate"
      intermediateChain:
        type: "string"
        description: "PEM-encoded certificate"
      validations:
        $ref: "#/definitions/ValidationList"
      validationState:
        $ref: "#/definitions/ValidationState"
  RootCACert:
    properties:
      id:
        type: "integer"
        description: "Object id"
      certificate:
        type: "string"
        description: "PEM-encoded certificate"
      certInfo:
        $ref: "#/definitions/CertInfo"
  CA_csr_dn:
    type: "object"
    required:
      - CN
      - O
    properties:
      CN:
        type: "string"
        description: Common Name
      O:
        type: "string"
        description: Organization
      OU:
        type: "string"
        description: Organizational Unit
      C:
        type: "string"
        description: Country
      ST:
        type: "string"
        description: State
      L:
        type: "string"
        description: Location
    description: "Certificate Authority subject info"
  CA_csr_key:
    type: "object"
    required:
      - algo
      - size
    properties:
      algo:
        type: "string"
        enum:
        - "rsa"
        - "ecdsa"
      size:
        type: "integer"
        format: "int64"
    description: "Key generation parameters\n"
    example:
      size: 4096
      algo: "rsa"
  CAInitialInfo:
    type: object
    description: CA initial parameters
    required:
      - csr
    properties:
      default:
        type: object
        description: To be used as default when generating keys, CSRs and certs
        properties:
          expiry:
            type: string
            description: 'This should contain a time duration in the form understood by Go''s time package ( https://golang.org/pkg/time/#ParseDuration ). This unfortunately means that the maximum unit of time that can be used here is the hour. Example 8760h ( = 1 year ). Default: "87600h", // 10 years'
          usages:
            type: array
            description: Key usages
            items:
              type: string
              enum:
                - 'signing'
                - 'key encipherment'
                - 'server auth'
                - 'client auth'
          signature_algorithm:
            type: string
            description: Signature algorithm to use when signing certificates.
            enum:
              - 'SHA256WithRSA'
              - 'SHA512WithRSA'
      csr:
        type: object
        description: CA root certificate parameters
        required:
          - hosts
          - names
          - key
        properties:
          hosts:
            type: "array"
            description: "List of hostnames."
            items:
              type: "string"
          names:
            type: "array"
            minItems: 1
            maxItems: 1
            description: "List of DN names."
            items:
              $ref: "#/definitions/CA_csr_dn"
          key:
            $ref: "#/definitions/CA_csr_key"
  URLEntry:
    properties:
      url:
        type: "string"
        description: "URL"
  IPEntry:
    properties:
      address:
        type: "string"
        description: "A single IP address or a set of address using CIDR notation \
        \ IP:\
        \ a.b.c.d\
        \ where 0 <= [a,b,c,d] <= 255\
        \ CIDR:\
        \ a.b.c.d/e\
        \ where 0 <= [a,b,c,d] <= 255, and 0 <= e <= 32"
        pattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
        example:
          "163.10.24.28/30"
      ports:
        type: "array"
        description: "List of ports or port ranges"
        items:
          type: "string"
          description: "Individual port or port range"
          example: "8000-8080"
        example:
          - "80"
          - "8000-8080"
  BaseEndpoint:
    description: Common properties to both IP and URL endpoints
    properties:
      id:
        type: "integer"
        format: "int32"
      type:
        type: "string"
        enum:
        - "IP"
        - "URL"
      direction:
        type: "string"
        enum:
        - "INGRESS"
        - "EGRESS"
      state:
        type: "string"
        enum:
        - "NEW"
        - "CONFIRMED"
        - "INVALID"
      createdDate:
        type: "string"
        format: "date-time"
      createdBy:
        type: "string"
      dfspId:
        type: "string"
  EndPointIp:
    allOf:
      - $ref: "#/definitions/BaseEndpoint"
      - type: object
        properties:
          value:
            $ref: "#/definitions/IPEntry"
  EndPointURL:
    allOf:
      - $ref: "#/definitions/BaseEndpoint"
      - type: object
        properties:
          value:
            $ref: "#/definitions/URLEntry"
  EndPointAny:
    allOf:
      - $ref: "#/definitions/BaseEndpoint"
      - type: object
        properties:
          value:
            description: It's *either* {url} OR {address and ports}.
            allOf:
              - $ref: "#/definitions/IPEntry"
              - $ref: "#/definitions/URLEntry"
  InputIPValue:
    type: object
    properties:
      value:
        $ref: "#/definitions/IPEntry"
  InputURLValue:
    type: object
    properties:
      value:
        $ref: "#/definitions/URLEntry"
  CSRParameters:
    type: object
    description: Parameters used to create the CSR
    properties:
      subject:
        type: object
        description: CSR Subject
        required:
          - CN
        properties:
          CN:
            type: "string"
            description: Common Name
          E:
            type: "string"
            description: email address
          O:
            type: "string"
            description: Organization
          OU:
            type: "string"
            description: Organizational Unit
          C:
            type: "string"
            description: Country
          ST:
            type: "string"
            description: State
          L:
            type: "string"
            description: Location
      extensions:
        type: object
        description: X.509 extensions.
        properties:
          subjectAltName:
            type: object
            description: Subject alternative names extension. See https://www.openssl.org/docs/manmaster/man5/x509v3_config.html#Subject-Alternative-Name
            properties:
              dns:
                type: array
                description: Array of DNS names
                items:
                  type: string
                  description: DNS name
              ips:
                type: array
                description: Array of IPs
                items:
                  type: string
                  description: IP address
  CertInfo:
    type: "object"
    description: "Certificate contents and info"
    properties:
      subject:
        type: "object"
        properties:
          CN:
            type: "string"
            description: Common Name
          E:
            type: "string"
            description: email address
          O:
            type: "string"
            description: Organization
          OU:
            type: "string"
            description: Organizational Unit
          C:
            type: "string"
            description: Country
          ST:
            type: "string"
            description: State
          L:
            type: "string"
            description: Location
      issuer:
        type: "object"
        properties:
          CN:
            type: "string"
            description: Common Name
          E:
            type: "string"
            description: email address
          O:
            type: "string"
            description: Organization
          OU:
            type: "string"
            description: Organizational Unit
          C:
            type: "string"
            description: Country
          ST:
            type: "string"
            description: State
          L:
            type: "string"
            description: Location
      subjectAlternativeNames:
        type: "array"
        items:
          type: "string"
      serialNumber:
        type: "string"
        example: "17159976289428250189079625547205715159"
      notBefore:
        type: "string"
        description: "ISO date format"
        example: "2019-02-04T00:00:00Z"
      notAfter:
        type: "string"
        description: "ISO date format"
        example: "2020-02-12T12:00:00Z"
      signatureAlgorithm:
        type: "string"
        example: "SHA256WithRSA"
  CSRInfo:
    type: "object"
    description: "CSR contents and info"
    properties:
      subject:
        type: "object"
        properties:
          CN:
            type: "string"
            description: Common Name
          E:
            type: "string"
            description: email address
          O:
            type: "string"
            description: Organization
          OU:
            type: "string"
            description: Organizational Unit
          C:
            type: "string"
            description: Country
          ST:
            type: "string"
            description: State
          L:
            type: "string"
            description: Location
      extensions:
        type: "object"
        properties:
          subjectAltName:
            type: "object"
            properties:
              dns:
                type: "array"
                items:
                  type: "string"
              ips:
                type: "array"
                items:
                  type: "string"
                  example: "163.10.5.24"
              emailAddresses:
                type: "array"
                items:
                  type: "string"
                  example: "pki@modusbox.live"
              uris:
                type: "array"
                items:
                  type: "string"
                  example: "http://modusbox.live"
  Statuses:
    type: "string"
    enum:
      - NOT_STARTED
      - IN_PROGRESS
      - COMPLETED
  Phases:
    type: "string"
    enum:
      - BUSINESS_SETUP
      - TECHNICAL_SETUP
  Identifier:
    type: "string"
    enum:
      - ID_GENERATION
      - ENDPOINTS
      - CSR_EXCHANGE
      - CERTIFICATE_AUTHORITY
      - SERVER_CERTIFICATES_EXCHANGE
      - JWS_CERTIFICATES
  EnvironmentDfspStatus:
    type: object
    properties:
      phase:
        $ref: '#/definitions/Phases'
      steps:
        type: array
        items:
          type: object
          properties:
            identifier:
              $ref: '#/definitions/Identifier'
            status:
              $ref: '#/definitions/Statuses'
  ValidationCodes:
    type: "string"
    description:  "Identifies the type of validation"
    enum:
      - "CSR_CERT_SAME_PUBLIC_KEY"
      - "CSR_CERT_SAME_SUBJECT_INFO"
      - "CSR_CERT_PUBLIC_PRIVATE_KEY_MATCH"
      - "CERTIFICATE_SIGNED_BY_DFSP_CA"
      - "CERTIFICATE_VALIDITY"
      - "CERTIFICATE_USAGE_CLIENT"
      - "CSR_SIGNATURE_VALID"
      - "CSR_PUBLIC_KEY_LENGTH"
      - "CSR_SIGNATURE_ALGORITHM"
      - "CERTIFICATE_USAGE_SERVER"
      - "CERTIFICATE_CHAIN"
      - "CA_CERTIFICATE_USAGE"
      - "CERTIFICATE_VALID_OCSP"
      - "CERTIFICATE_VALID_CRL"
  ValidationCodesDescription:
    type: "array"
    items:
      type: "object"
      properties:
        validationCode:
          $ref: "#/definitions/ValidationCodes"
        description:
          type: "string"
    default:
      - validationCode: "CSR_CERT_SAME_PUBLIC_KEY"
        description: "The CSR and the Certificate must have the same Public Key"
      - validationCode: "CSR_CERT_SAME_SUBJECT_INFO"
        description: "The CSR and the Certificate must have the same Subject Information ( distinguished name and extensions )"
      - validationCode: "CSR_CERT_PUBLIC_PRIVATE_KEY_MATCH"
        description: "The Certificate Public Key must match the private key used to sign the CSR. Only available if the CSR was created by the Connection-Manager. If the CSR was uploaded instead of generated by the Connection Manager, and there's no private key associated, this will be set the state to NOT_AVAILABLE"
      - validationCode: "CERTIFICATE_SIGNED_BY_DFSP_CA"
        description: "The Certificate should be signed by the DFSP CA. data.result = TRUST_CHAIN_VALID or SELF_SIGNED or INVALID or NOT_AVAILABLE if the ca info is not present"
      - validationCode: "CERTIFICATE_VALIDITY"
        description: "The certificate must be valid at present time according to the certificate validity period"
      - validationCode: "CERTIFICATE_USAGE_CLIENT"
        description: "The certificate must have the 'TLS WWW client authentication' key usage extension. See https://tools.ietf.org/html/rfc5280#section-4.2.1.12"
      - validationCode: "CSR_SIGNATURE_VALID"
        description: "The CSR must have a valid signature ( the signature matches the public key )"
      - validationCode: "CSR_PUBLIC_KEY_LENGTH_2048"
        description: "The CSR key length must be at least 2048 bits"
      - validationCode: "CSR_PUBLIC_KEY_LENGTH_4096"
        description: "The CSR key length must be at least 4096 bits"
      - validationCode: "CERTIFICATE_PUBLIC_KEY_LENGTH_2048"
        description: "The CERTIFICATE key length must be at least 2048 bits"
      - validationCode: "CERTIFICATE_PUBLIC_KEY_LENGTH_4096"
        description: "The CERTIFICATE key length must be at least 4096 bits"
      - validationCode: "CSR_SIGNATURE_ALGORITHM"
        description: "The CSR signature algorithm must be the one specified in the environment or globally. Defaults to 'sha256WithRSAEncryption'"
      - validationCode: "CERTIFICATE_USAGE_SERVER"
        description: "The certificate must have the 'TLS WWW server authentication' key usage extension. See https://tools.ietf.org/html/rfc5280#section-4.2.1.12"
      - validationCode: "CERTIFICATE_CHAIN"
        description: "The certificate and its chain must form a valid trust chain. See https://tools.ietf.org/html/rfc5280#section-6.1"
      - validationCode: "CA_CERTIFICATE_USAGE"
        description: "Root and intermediate CAs certificates must have the CA basic contraint extension ( CA = true ) and the keyCertSign key usage extension. See https://tools.ietf.org/html/rfc5280#section-4.2.1.3 and https://tools.ietf.org/html/rfc5280#section-4.2.1.9"
      - validationCode: "CERTIFICATE_VALID_OCSP"
        description: "The certificate must be valid according to the Online Certificate Status Protocol (OCSP) [RFC2560]"
      - validationCode: "CERTIFICATE_VALID_CRL"
        description: "The certificate must be valid according to the certificate revocation lists (CRLs) info. At the current time, the certificate is not revoked. See https://tools.ietf.org/html/rfc5280#section-6.3"


  Validation:
    type: "object"
    required:
      - validationCode
      - performed
      - result
      - message
    properties:
      validationCode:
        $ref: "#/definitions/ValidationCodes"
      performed:
        description: "Whether the validation has been performed or not"
        type: "boolean"
      result:
        type: "string"
        enum:
          - "VALID"
          - "INVALID"
          - "NOT_AVAILABLE"
      message:
        description: "Textual description of the validation result"
        type: "string"
      messageTemplate:
        description: "Textual description of the validation result, using the JavaScript template literal format"
        type: "string"
      data:
        description: "validation-specific data. Could be used by the UI to show more detail to the user"
        type: "object"
      details:
        description: "Command output or some other details about the validation"
        type: "string"
  ValidationList:
    type: "array"
    items:
      $ref: "#/definitions/Validation"

  MonetaryZone:
    type: "object"
    properties:
      monetaryZoneId:
        type: "string"
        pattern: '^[A-Z]{3}$'
      name:
        type: "string"
    example:
      monetaryZoneId: "EUR"
      name: "Euro"

x-components:
  requestBodies:
    CA:
      description: "CA initial info"
      in: "body"
      name: "body"
      required: true
      schema:
        $ref: "#/definitions/CAInitialInfo"
    DFSP:
      description: "DFSP initial info"
      in: "body"
      name: "body"
      required: true
      schema:
        $ref: "#/definitions/DFSPCreate"
    DFSPInbound:
      description: "DFSP inbound initial info"
      in: "body"
      name: "body"
      required: true
      schema:
        $ref: "#/definitions/DFSPInboundCreate"
    DFSPOutbound:
      description: "DFSP outbound initial info"
      in: "body"
      name: "body"
      required: true
      schema:
        $ref: "#/definitions/DFSPOutboundCreate"
    Environment:
      description: "Environment initial info"
      in: "body"
      name: "body"
      required: true
      schema:
        $ref: "#/definitions/Environment"
