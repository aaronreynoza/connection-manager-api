# Notes:
# - need to enable "improved container support":
#   https://docs.github.com/en/packages/guides/enabling-improved-container-support
# - need to add an access token to secrets (in this case called CR_PAT), probably good to do this
#   at organisation level. This access token needs to be a personal access token at the time of
#   writing. This works, because the organisation policy gives organisation members permission to
#   publish packages.
# - looks like you'll need to manually make the published image public by visiting:
#   https://github.com/orgs/mojaloop/packages

# TODO: create a tag/release with the version based on the version in package.json every time a
# merge is made to master? Prevent any merges to master without a code change? (That's probably
# tricky- what to do about documentation changes etc.? Perhaps build the container image, see if
# the checksum is the same as the existing one, and prevent pushes to master that change the
# container checksum without changing the package.json version?).

# At the time of writing, it's
#  - not possible to filter here on the name of the release, for example we cannot say "only run
#    this job on releases with a name matching v[0-9]+.[0-9]+.[0-9]+" (i.e. a pseudo semantic
#    version)
#  - possible to trigger the job on a tag matching a pseudo semantic version as described above,
#    but also possible to push multiple tags at once, and difficult to extract the tag name using
#    the information available to the job. As one example: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
#    it isn't possible to use ${{ github.ref }} because that is of the form /refs/tags/$tag_name,
#    and the functionality available here: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#functions
#    is not sufficient to extract the tag.
#    Similarly, `github.event.push` doesn't seem to provide an easy way to extract the tag that
#    triggered the event, and does appear to potentially contain multiple tags per push:
#    https://docs.github.com/en/actions/reference/events-that-trigger-workflows#push
#    https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#push
#  - perhaps it's possible to use a workflow step to set a filter as an output value, then use said
#    value to filter later steps? Here's how to set a step output value:
#    https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
#    Will need to determine whether it's possible to filter steps on a value

name: Publish image

on:
  # The build will run on all of the following event types, however an image will _only_ be
  # published for a release.
  release:
    types: [published]
  push:
    branches:
      - '**'
  pull_request:

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      -
        # At the time of writing, we need to manually specify the context, as we can't set a
        # subdirectory of the repo as a build context
        # https://github.com/docker/build-push-action/tree/636b4540ec057719fe868a4435761056c89d2fff#git-context
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # Except for Dockerhub, which is the default, tags need to have the registry name in
          # them, e.g. ghcr.io for Github container registry, or gcr.io for Google container
          # registry.
          # Note that the generated tags will look like:
          #   ghcr.io/{owner}/{repo}:version
          images: ghcr.io/${{ github.repository }}
          # For a release v1.2.3, we'll produce the following image tags
          #   v1.2.3
          #   1.2.3
          #   1.2
          #   latest
          # Semver pre-release versions are also supported
          # See also:
          # https://github.com/crazy-max/ghaction-docker-meta/tree/0a412843f87333854fa03a809b74056b64c6f31a#handle-semver-tag
          tag-semver: |
            {{raw}}
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.vendor=Mojaloop Foundation
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/tree/${{ github.sha }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GitHub Container Registry
        if: ${{ github.event_name == 'release' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.2.1
        with:
          push: ${{ github.event_name == 'release' }}
          # The following two lines are required in concert with the checkout action above, because
          # the Dockerfile is in a subdirectory in the repo.
          context: ./server
          file: ./server/Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
