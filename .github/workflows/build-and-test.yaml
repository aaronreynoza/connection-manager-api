name: ci-build-and-test

on: [pull_request]
# on:
#   push:
#     branches:
#       - 'main'

env:
  APP_WORK_DIRECTORY: ./server
  APP_CACHE_NAME: cache-app-node-modules
  # IMAGE_NAME: ${GITHUB_REPOSITORY#*/}
  # IMAGE_TAG: 

jobs:
  # build-node:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #     - 
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 'lts/*'
  #     -
  #       name: Install dependencies
  #       working-directory: ${{env.APP_WORK_DIRECTORY}}
  #       run: |
  #         npm i
  #     - name: Cache Node Modules
  #       uses: actions/cache@v3
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/${{env.APP_WORK_DIRECTORY}}/.node_modules
  #         key: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME}}-${{ hashFiles('**/package-lock.json') }}
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: ./server
          tags: connection-manager-api:test
          outputs: type=docker,dest=/tmp/connection-manager-api.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: connection-manager-api
          path: /tmp/connection-manager-api.tar

  use:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: connection-manager-api
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/connection-manager-api.tar
          docker image ls -a
      - 
        name: start backends
