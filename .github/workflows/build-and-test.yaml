name: ci-build-and-test

on: [pull_request]
# on:
#   push:
#     branches:
#       - 'main'

env:
  IMAGE_NAME: ${{github.event.repository.name}}
  IMAGE_TAG: ${{ github.sha }}
  APP_WORK_DIRECTORY: server
  APP_CACHE_NAME: cache-app-node-modules
  TEST_FUNC_WORK_DIRECTORY: functional-tests
  NODE_VERSION: lts/*
  # IMAGE_TAG: 

jobs:
  build-node:
    runs-on: ubuntu-latest
    steps:
      - name: print env
        run: |
          echo "${IMAGE_NAME}"
          echo "${IMAGE_TAG}"
          echo "${APP_WORK_DIRECTORY}"
          echo "${APP_CACHE_NAME}"
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: npm
          cache-dependency-path: ${{env.APP_WORK_DIRECTORY}}/package-lock.json
      - name: Install App dependencies
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm i
      # - name: Cache Node Modules
      #   uses: actions/cache@v3
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/${{env.APP_WORK_DIRECTORY}}/.node_modules
      #     key: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME}}-${{ hashFiles('**/package-lock.json') }}
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: ./server
          tags: ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          outputs: type=docker,dest=/tmp/${{env.IMAGE_NAME}}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.IMAGE_NAME}}-${{env.IMAGE_TAG}}
          path: /tmp/${{env.IMAGE_NAME}}.tar

  test-integration:
    runs-on: ubuntu-latest
    needs:
      - build-node
      # - build-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: npm
          cache-dependency-path: ${{env.APP_WORK_DIRECTORY}}/package-lock.json
      - name: Install App dependencies
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm i

      - name: Start backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run start:backend

      - name: Validate Integration Tests
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm test

      - name: Stop backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run stop:backend

  test-functional:
    runs-on: ubuntu-latest
    needs:
      - build-node
      - build-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{env.IMAGE_NAME}}-${{env.IMAGE_TAG}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/${{env.IMAGE_NAME}}.tar
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: npm
          cache-dependency-path: ${{env.APP_WORK_DIRECTORY}}/package-lock.json
      - name: Install App dependencies
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm i
      - name: Install Functional-tests dependencies
        working-directory: ${{env.TEST_FUNC_WORK_DIRECTORY}}
        run: npm i
      # - name: Cache Node Modules
      #   uses: actions/cache@v3
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/${{env.APP_WORK_DIRECTORY}}/.node_modules
      #     key: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: ${{ runner.os }}-build-${{ env.APP_CACHE_NAME}}-${{ hashFiles('**/package-lock.json') }}

      - name: Start backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run start:backend

      - name: Start App
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: docker run -d --rm --name ${{env.IMAGE_NAME}} -p 3001:3001 -e TEST=true ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

      - name: Wait for App
        run: | 
          echo "
            echo -n 'Waiting for ${{env.IMAGE_NAME}}';
            COUNTER=0
            while ! docker run --rm alpine/curl:3.14 http://localhost:3001/docs > /dev/null 2>&1;
            do 
              echo -n '.' && sleep 1;
              COUNTER=$((COUNTER+1))
              if [ "$COUNTER" -e 10 ]; then
                  break
              fi
            done;
            echo;
            echo 'Successfully connected to ${{env.IMAGE_NAME}}!';
          " > /tmp/wait-for-app.sh
          sh /tmp/wait-for-app.sh

      - name: Validate Functional Tests
        working-directory: ${{env.TEST_FUNC_WORK_DIRECTORY}}
        run: npm test

      - name: Stop backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run stop:backend

      - name: Stop App
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: docker stop ${{env.IMAGE_NAME}}
